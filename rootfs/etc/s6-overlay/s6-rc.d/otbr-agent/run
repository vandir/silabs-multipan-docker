#!/usr/bin/with-contenv bash
# ==============================================================================
# OpenThread BorderRouter start script
# ==============================================================================
source /etc/bashlog/log.sh;

. /etc/s6-overlay/scripts/otbr-agent-common

declare backbone_if
declare device
declare baudrate
declare flow_control
declare otbr_log_level
declare otbr_log_level_int
declare otbr_rest_listen
declare otbr_rest_listen_port
declare otbr_nat64
declare thread_if

thread_if="wpan0"

backbone_if=$BACKBONE_IF

otbr_log_level=$OTBR_LOG_LEVEL
case "${otbr_log_level}" in
    debug)
        otbr_log_level_int="7"
        ;;
    info)
        otbr_log_level_int="6"
        ;;
    notice)
        otbr_log_level_int="5"
        ;;
    warning)
        otbr_log_level_int="4"
        ;;
    error)
        otbr_log_level_int="3"
        ;;
    critical)
        otbr_log_level_int="2"
        ;;
    alert)
        otbr_log_level_int="1"
        ;;
    emergency)
        otbr_log_level_int="0"
        ;;
    *)
        log 'info' "Unknown otbr_log_level: ${otbr_log_level}"
        otbr_log_level_int="6"
        ;;
esac

if [ -z ${backbone_if} ]; then
    log 'info' "No primary network interface found! Using static eth0."
    backbone_if="eth0"
fi

mkdir -p /data/thread && ln -sft /var/lib /data/thread || echo "Could not create directory /var/lib/thread to store Thread data." #TODO sys exit

if [ $OTB_FIREWALL -eq 1 ]; then
    log 'info' "Setup OTBR firewall..."
    ipset create -exist otbr-ingress-deny-src hash:net family inet6
    ipset create -exist otbr-ingress-deny-src-swap hash:net family inet6
    ipset create -exist otbr-ingress-allow-dst hash:net family inet6
    ipset create -exist otbr-ingress-allow-dst-swap hash:net family inet6

    ip6tables -N $otbr_forward_ingress_chain
    ip6tables -I FORWARD 1 -o $thread_if -j $otbr_forward_ingress_chain

    ip6tables -A $otbr_forward_ingress_chain -m pkttype --pkt-type unicast -i ${thread_if} -j DROP
    ip6tables -A $otbr_forward_ingress_chain -m set --match-set otbr-ingress-deny-src src -j DROP
    ip6tables -A $otbr_forward_ingress_chain -m set --match-set otbr-ingress-allow-dst dst -j ACCEPT
    ip6tables -A $otbr_forward_ingress_chain -m pkttype --pkt-type unicast -j DROP
    ip6tables -A $otbr_forward_ingress_chain -j ACCEPT

    ip6tables -N $otbr_forward_egress_chain
    ip6tables -I FORWARD 2 -i $thread_if -j $otbr_forward_egress_chain
    ip6tables -A $otbr_forward_egress_chain -j ACCEPT
else
    # Make sure ip6tables (as used by Docker) allow IP forwarding
    ip6tables -P FORWARD ACCEPT
    # HAOS 9.3 and earlier (for 9.4 accept is the default so this won't do anything)
    ip6tables-legacy -P FORWARD ACCEPT
fi

if  [[ -z "${OTBR_NAT64}" ]]; then
    export OTBR_NAT64="false"
fi
otbr_nat64=$OTBR_NAT64
if [ "$otbr_nat64" = true ] ; then
    log 'info' "Setting iptables for NAT64..."
    iptables -t mangle -A PREROUTING -i ${thread_if} -j MARK --set-mark 0x1001
    iptables -t nat -A POSTROUTING -m mark --mark 0x1001 -j MASQUERADE

    iptables -t filter -A FORWARD -o ${backbone_if} -j ACCEPT

    iptables -t filter -A FORWARD -i ${backbone_if} -j ACCEPT
fi

otbr_rest_listen="::"
otbr_rest_listen_port="${OTBR_REST_LISTEN_PORT}"

# If user port is not set, listen on local interface only
if [ -z "${otbr_rest_listen_port}" ]; then
    otbr_rest_listen="::"
    otbr_rest_listen_port="8081"
elif [ "${otbr_rest_listen_port}" != "8081" ]; then
    log 'warning' "Custom OpenThread REST API port is not supported. Using 8081."
    otbr_rest_listen_port="8081"
fi

# Store REST API listen information for check script
echo "${otbr_rest_listen}" > /tmp/otbr-agent-rest-api
echo "${otbr_rest_listen_port}" >> /tmp/otbr-agent-rest-api

log 'info' "Starting otbr-agent..."
exec s6-notifyoncheck -d -s 300 -w 300 -n 0 \
    "/usr/sbin/otbr-agent" -I ${thread_if} -B "${backbone_if}" \
        --rest-listen-address "${otbr_rest_listen}" \
        -d${otbr_log_level_int} -v \
        "spinel+cpc://cpcd_0?iid=2&iid-list=0"
